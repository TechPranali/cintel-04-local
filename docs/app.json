[{"name": "app.py", "content": "from shiny import reactive, render  \nfrom shiny.express import input, ui  \nfrom shinywidgets import render_plotly  \nimport pandas as pd  \nimport plotly.express as px  \nimport seaborn as sns  \nimport palmerpenguins \n\n# Load penguins data into DataFrame\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Pranali's Penguin Data\", fillable=True)\n\n# Create sidebar UI elements\nwith ui.sidebar(open=\"open\"):\n    # Heading\n    ui.h2(\"Sidebar\")\n\n    # Dropdown to choose Plotly attribute\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Choose Plotly attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Input for Plotly histogram bins count\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 40)\n\n    # Slider for Seaborn bins count\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 40, 20)\n\n    # Checkbox group for selecting species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"species\",\n        [\"Gentoo\", \"Chinstrap\", \"Adelie\"],\n        selected=[\"Gentoo\", \"Chinstrap\"],\n        inline=True,\n    )\n\n     # Creates a checkbox group input for islands\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Islands\",\n        penguins_df[\"island\"].unique().tolist(),\n        selected=penguins_df[\"island\"].unique().tolist(),\n        inline=True,\n    )\n\n    # Horizontal rule\n    ui.hr()\n\n    # Link to GitHub repo\n    ui.a(\n        \"Pranali's GitHub Repo\",\n        href=\"https://github.com/TechPranali/cintel-02-data\",\n        target=\"_blank\",\n    )\n\n# Create layout with two cards\nwith ui.layout_columns():\n    with ui.card(full_screen=True):  \n        # Heading for Penguin Data Table\n        ui.h2(\"Penguin Data Table\")\n\n        # Render penguins DataFrame as DataTable\n        @render.data_frame\n        def penguins_datatable():\n            return render.DataTable(penguins_df)\n\n    with ui.card(full_screen=True): \n        # Heading for Penguin Data Grid\n        ui.h2(\"Penguin Data Grid\")\n\n        # Render penguins DataFrame as DataGrid\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(penguins_df)\n\n# Horizontal rule\nui.hr()\n\n# Create layout with three cards for different plots\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        # Heading for Species Plotly Histogram\n        ui.h2(\"Species Plotly Histogram\")\n\n        # Render Plotly histogram\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            )\n\n    with ui.card(full_screen=True):\n        # Heading for Seaborn Histogram\n        ui.h2(\"Seaborn Histogram\")\n\n        # Render Seaborn histogram\n        @render.plot(alt=\"Species Seaborn Histogram\")\n        def seaborn_histogram():\n            seaborn_plot = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n                multiple=\"dodge\",\n                hue=\"species\",\n            )\n            seaborn_plot.set_title(\"Species Seaborn Histogram\")\n            seaborn_plot.set_ylabel(\"Measurement\")\n\n    with ui.card(full_screen=True):\n        # Heading for Species Plotly Scatterplot\n        ui.h2(\"Species Plotly Scatterplot\")\n\n        # Render Plotly scatterplot\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                title=\"Plotly Scatterplot\",\n                x=\"body_mass_g\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                symbol=\"species\",\n            )\n\n# Reactive calculation to filter data based on selected species\n@reactive.calc\ndef filtered_data():\n    return penguins_df[\n        penguins_df[\"species\"].isin(input.selected_species_list())\n    ]", "type": "text"}]